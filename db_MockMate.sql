

------------------------------------------------------
-- 2. SCHEMA CREATION PHASE
------------------------------------------------------

-- 2.1 USERS Table (Stores Candidate Profiles)
------------------------------------------------------
CREATE TABLE USERS (
    -- Primary Key: Unique ID for the candidate
    user_id          NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY, 
    
    -- Candidate-provided data from the setup screen (index.html)
    username         VARCHAR2(100) NOT NULL,
    password_hash    VARCHAR2(255) NOT NULL, -- Storing a secure hash of the password
    
    -- Candidate's target information for question filtering
    target_role      VARCHAR2(100) NOT NULL, 
    target_company   VARCHAR2(100),          -- Can be NULL if not specified
    
    -- Timestamp for user creation/registration
    created_at       TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMENT ON TABLE USERS IS 'Stores basic profile information and target role/company for each candidate.';
COMMENT ON COLUMN USERS.user_id IS 'Unique Primary Key for the user.';
COMMENT ON COLUMN USERS.target_role IS 'The job role the candidate is preparing for.';
COMMENT ON COLUMN USERS.password_hash IS 'Secure hash of the user''s password.';
------------------------------------------------------
-- 2.2 ROUNDS Table (Defines Fixed Interview Structure: Tech, Aptitude, HR)
------------------------------------------------------
CREATE TABLE ROUNDS (
    -- Primary Key: Unique ID for the round definition
    round_id          NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    
    -- Structure details
    round_number      NUMBER NOT NULL,              -- The order of the round (1=Tech, 2=Aptitude, 3=HR)
    round_type        VARCHAR2(50) NOT NULL,        -- e.g., 'Tech', 'Aptitude', 'HR'
    
    -- Logic details for scoring and question count
    q_weight          NUMBER(3) DEFAULT 100 NOT NULL, -- Weight in percentage for this round in the final score
    total_questions   NUMBER(2) NOT NULL,             -- Fixed number of questions in this round
    
    -- Constraints to enforce the structure
    CONSTRAINT chk_round_type CHECK (round_type IN ('Tech', 'Aptitude', 'HR')),
    CONSTRAINT uq_round_number UNIQUE (round_number) 
);

COMMENT ON TABLE ROUNDS IS 'Defines the fixed, mandatory three-round structure (Tech, Aptitude, HR) for all interview sessions.';
COMMENT ON COLUMN ROUNDS.round_type IS 'The type of the round, used for question matching and categorization.';
------------------------------------------------------
-- 2.3 QUESTIONS Table (The Master Pool of Interview Questions)
------------------------------------------------------
CREATE TABLE QUESTIONS (
    -- Primary Key: Unique ID for the question
    q_id                    NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    
    -- The actual question content (CLOB for potentially long questions)
    q_text                  CLOB NOT NULL, 
    
    -- Metadata for question selection logic
    q_type                  VARCHAR2(50) NOT NULL,  
    role_title              VARCHAR2(100) NOT NULL, -- The role this question is relevant to
    seniority_level         VARCHAR2(50) NOT NULL,  -- e.g., 'Junior', 'Mid-level', 'Senior'
    is_company_specific     CHAR(1) DEFAULT 'N' NOT NULL, -- 'Y' or 'N'
    company_name            VARCHAR2(100),          -- Specific company if applicable
    
    -- Check constraint to ensure q_type aligns with the defined rounds or is general
    CONSTRAINT chk_q_type_v2 CHECK (q_type IN ('Tech', 'Aptitude', 'HR', 'General'))
);

COMMENT ON TABLE QUESTIONS IS 'Stores the master list of all interview questions, categorized by type and role.';
COMMENT ON COLUMN QUESTIONS.q_type IS 'Category of the question (e.g., must match a round type or be General).';
------------------------------------------------------
-- 2.4 SESSIONS Table (Overall Interview Session Metadata)
------------------------------------------------------
CREATE TABLE SESSIONS (
    -- Primary Key: Unique ID for the session
    session_id           NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    
    -- Foreign Key: Links the session back to the user who took it
    user_id              NUMBER NOT NULL,
    
    -- Session status and timing
    start_timestamp      TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    end_timestamp        TIMESTAMP,                  -- NULL until the session is completed
    
    -- Final evaluation results
    final_score          NUMBER(3),                  -- Final score out of 100
    strengths            CLOB,                       -- AI-generated summary of strengths
    improvements         CLOB,                       -- AI-generated summary of areas for improvement
    
    -- Define the Foreign Key constraint
    CONSTRAINT fk_session_user
        FOREIGN KEY (user_id)
        REFERENCES USERS(user_id)
        ON DELETE CASCADE -- If a user is deleted, all their session history is deleted
);

COMMENT ON TABLE SESSIONS IS 'Stores the high-level details and final report summary for each mock interview.';
COMMENT ON COLUMN SESSIONS.user_id IS 'Foreign Key linking to the USERS table.';
COMMENT ON COLUMN SESSIONS.final_score IS 'The final overall score (out of 100) assigned by the AI.';
------------------------------------------------------
-- 2.5 QUESTION_LOG Table (Detailed Q/A History and Assessment)
------------------------------------------------------
CREATE TABLE QUESTION_LOG (
    -- Primary Key: Unique ID for this specific question/answer record
    log_id               NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    
    -- Foreign Keys: Establish relationship with Session, Question, and Round
    session_id           NUMBER NOT NULL,
    q_id                 NUMBER NOT NULL,
    round_id             NUMBER NOT NULL, 
    
    -- Specific details for this Q&A event
    candidate_answer     CLOB,              -- The full text of the candidate's answer
    ai_score             NUMBER(2),         -- AI score for THIS specific answer (e.g., out of 10)
    ai_feedback          CLOB,              -- Specific AI feedback/rationale for this question
    
    -- Define the Foreign Key constraints (ON DELETE RESTRICT is removed/defaulted)
    CONSTRAINT fk_log_session
        FOREIGN KEY (session_id)
        REFERENCES SESSIONS(session_id)
        ON DELETE CASCADE, -- If session is deleted, remove all related logs
        
    -- Default Oracle behavior (NO ACTION) prevents deletion of parent if child rows exist.
    CONSTRAINT fk_log_question
        FOREIGN KEY (q_id)
        REFERENCES QUESTIONS(q_id), 
        
    -- Default Oracle behavior (NO ACTION) prevents deletion of parent if child rows exist.
    CONSTRAINT fk_log_round
        FOREIGN KEY (round_id)
        REFERENCES ROUNDS(round_id) 
);

COMMENT ON TABLE QUESTION_LOG IS 'Stores every question asked, the candidate''s answer, and the AI''s detailed assessment for that answer.';
COMMENT ON COLUMN QUESTION_LOG.round_id IS 'Foreign Key linking to the ROUNDS table to define the round type (Tech, Aptitude, HR) this question was asked in.';
 INSERT INTO ROUNDS (round_number, round_type, q_weight, total_questions) VALUES (1, 'Tech', 50, 5);
INSERT INTO ROUNDS (round_number, round_type, q_weight, total_questions) VALUES (2, 'Aptitude', 30, 3);
INSERT INTO ROUNDS (round_number, round_type, q_weight, total_questions) VALUES (3, 'HR', 20, 2);

COMMIT;
